"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_project-serum_sol-wallet-adapter_dist_esm_index_js"],{

/***/ "./node_modules/@project-serum/sol-wallet-adapter/dist/esm/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@project-serum/sol-wallet-adapter/dist/esm/index.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ Wallet; }\n/* harmony export */ });\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"./node_modules/@solana/web3.js/lib/index.browser.esm.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_2__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nclass Wallet extends (eventemitter3__WEBPACK_IMPORTED_MODULE_0___default()) {\r\n    constructor(provider, _network) {\r\n        super();\r\n        this._network = _network;\r\n        this._publicKey = null;\r\n        this._popup = null;\r\n        this._handlerAdded = false;\r\n        this._nextRequestId = 1;\r\n        this._autoApprove = false;\r\n        this._responsePromises = new Map();\r\n        this.handleMessage = (e) => {\r\n            var _a;\r\n            if ((this._injectedProvider && e.source === window) ||\r\n                (e.origin === ((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.origin) && e.source === this._popup)) {\r\n                if (e.data.method === 'connected') {\r\n                    const newPublicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(e.data.params.publicKey);\r\n                    if (!this._publicKey || !this._publicKey.equals(newPublicKey)) {\r\n                        if (this._publicKey && !this._publicKey.equals(newPublicKey)) {\r\n                            this.handleDisconnect();\r\n                        }\r\n                        this._publicKey = newPublicKey;\r\n                        this._autoApprove = !!e.data.params.autoApprove;\r\n                        this.emit('connect', this._publicKey);\r\n                    }\r\n                }\r\n                else if (e.data.method === 'disconnected') {\r\n                    this.handleDisconnect();\r\n                }\r\n                else if (e.data.result || e.data.error) {\r\n                    const promises = this._responsePromises.get(e.data.id);\r\n                    if (promises) {\r\n                        const [resolve, reject] = promises;\r\n                        if (e.data.result) {\r\n                            resolve(e.data.result);\r\n                        }\r\n                        else {\r\n                            reject(new Error(e.data.error));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this._beforeUnload = () => {\r\n            void this.disconnect();\r\n        };\r\n        if (isInjectedProvider(provider)) {\r\n            this._injectedProvider = provider;\r\n        }\r\n        else if (isString(provider)) {\r\n            this._providerUrl = new URL(provider);\r\n            this._providerUrl.hash = new URLSearchParams({\r\n                origin: window.location.origin,\r\n                network: this._network,\r\n            }).toString();\r\n        }\r\n        else {\r\n            throw new Error('provider parameter must be an injected provider or a URL string.');\r\n        }\r\n    }\r\n    handleConnect() {\r\n        var _a;\r\n        if (!this._handlerAdded) {\r\n            this._handlerAdded = true;\r\n            window.addEventListener('message', this.handleMessage);\r\n            window.addEventListener('beforeunload', this._beforeUnload);\r\n        }\r\n        if (this._injectedProvider) {\r\n            return new Promise((resolve) => {\r\n                void this.sendRequest('connect', {});\r\n                resolve();\r\n            });\r\n        }\r\n        else {\r\n            window.name = 'parent';\r\n            this._popup = window.open((_a = this._providerUrl) === null || _a === void 0 ? void 0 : _a.toString(), '_blank', 'location,resizable,width=460,height=675');\r\n            return new Promise((resolve) => {\r\n                this.once('connect', resolve);\r\n            });\r\n        }\r\n    }\r\n    handleDisconnect() {\r\n        if (this._handlerAdded) {\r\n            this._handlerAdded = false;\r\n            window.removeEventListener('message', this.handleMessage);\r\n            window.removeEventListener('beforeunload', this._beforeUnload);\r\n        }\r\n        if (this._publicKey) {\r\n            this._publicKey = null;\r\n            this.emit('disconnect');\r\n        }\r\n        this._responsePromises.forEach(([, reject], id) => {\r\n            this._responsePromises.delete(id);\r\n            reject(new Error('Wallet disconnected'));\r\n        });\r\n    }\r\n    sendRequest(method, params) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (method !== 'connect' && !this.connected) {\r\n                throw new Error('Wallet not connected');\r\n            }\r\n            const requestId = this._nextRequestId;\r\n            ++this._nextRequestId;\r\n            return new Promise((resolve, reject) => {\r\n                var _a, _b, _c, _d;\r\n                this._responsePromises.set(requestId, [resolve, reject]);\r\n                if (this._injectedProvider) {\r\n                    this._injectedProvider.postMessage({\r\n                        jsonrpc: '2.0',\r\n                        id: requestId,\r\n                        method,\r\n                        params: Object.assign({ network: this._network }, params),\r\n                    });\r\n                }\r\n                else {\r\n                    (_a = this._popup) === null || _a === void 0 ? void 0 : _a.postMessage({\r\n                        jsonrpc: '2.0',\r\n                        id: requestId,\r\n                        method,\r\n                        params,\r\n                    }, (_c = (_b = this._providerUrl) === null || _b === void 0 ? void 0 : _b.origin) !== null && _c !== void 0 ? _c : '');\r\n                    if (!this.autoApprove) {\r\n                        (_d = this._popup) === null || _d === void 0 ? void 0 : _d.focus();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n    get publicKey() {\r\n        return this._publicKey;\r\n    }\r\n    get connected() {\r\n        return this._publicKey !== null;\r\n    }\r\n    get autoApprove() {\r\n        return this._autoApprove;\r\n    }\r\n    connect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._popup) {\r\n                this._popup.close();\r\n            }\r\n            yield this.handleConnect();\r\n        });\r\n    }\r\n    disconnect() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (this._injectedProvider) {\r\n                yield this.sendRequest('disconnect', {});\r\n            }\r\n            if (this._popup) {\r\n                this._popup.close();\r\n            }\r\n            this.handleDisconnect();\r\n        });\r\n    }\r\n    sign(data, display) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!(data instanceof Uint8Array)) {\r\n                throw new Error('Data must be an instance of Uint8Array');\r\n            }\r\n            const response = (yield this.sendRequest('sign', {\r\n                data,\r\n                display,\r\n            }));\r\n            const signature = bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(response.signature);\r\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(response.publicKey);\r\n            return {\r\n                signature,\r\n                publicKey,\r\n            };\r\n        });\r\n    }\r\n    signTransaction(transaction) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = (yield this.sendRequest('signTransaction', {\r\n                message: bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(transaction.serializeMessage()),\r\n            }));\r\n            const signature = bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(response.signature);\r\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(response.publicKey);\r\n            transaction.addSignature(publicKey, signature);\r\n            return transaction;\r\n        });\r\n    }\r\n    signAllTransactions(transactions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const response = (yield this.sendRequest('signAllTransactions', {\r\n                messages: transactions.map((tx) => bs58__WEBPACK_IMPORTED_MODULE_2___default().encode(tx.serializeMessage())),\r\n            }));\r\n            const signatures = response.signatures.map((s) => bs58__WEBPACK_IMPORTED_MODULE_2___default().decode(s));\r\n            const publicKey = new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(response.publicKey);\r\n            transactions = transactions.map((tx, idx) => {\r\n                tx.addSignature(publicKey, signatures[idx]);\r\n                return tx;\r\n            });\r\n            return transactions;\r\n        });\r\n    }\r\n    diffieHellman(publicKey) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (!(publicKey instanceof Uint8Array)) {\r\n                throw new Error('Data must be an instance of Uint8Array');\r\n            }\r\n            const response = (yield this.sendRequest('diffieHellman', {\r\n                publicKey,\r\n            }));\r\n            return response;\r\n        });\r\n    }\r\n}\r\nfunction isString(a) {\r\n    return typeof a === 'string';\r\n}\r\nfunction isInjectedProvider(a) {\r\n    return (isObject(a) && 'postMessage' in a && typeof a.postMessage === 'function');\r\n}\r\nfunction isObject(a) {\r\n    return typeof a === 'object' && a !== null;\r\n}\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@project-serum/sol-wallet-adapter/dist/esm/index.js\n");

/***/ })

}]);